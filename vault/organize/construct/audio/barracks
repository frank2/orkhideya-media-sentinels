#!/bin/bash

source orkhideya
ork_include media
ork_include stdlib
ork_include stdout

function path_hazards
{
    local _hazard_area="$1"
    test -z "$_hazard_area" && return 1

    _hazard_area="$(echo "$_hazard_area" | sed -r -e "s,[/<>\.,\{\}=@#%^&\*:;'\"[()]+,_,g" -e 's,],_,g')"
    echo "$_hazard_area"

    return 0
}

function pathfriendly_directory
{
    local _filename="$1"
    test -z "$_filename" && return 1

    _filename="$(echo "$_filename" | sed -r -e 's,^\s+,,' -e 's,\s$,,' -e 's,\s+,_,g')"
    _filename="$(echo "$_filename" | sed -r -e 's,_+,_,g' -e 's,_-,-,g' -e 's,_\.,.,g')"

    echo "$_filename"
}

function pathfriendly_file
{
    local _filename="$1"
    test -z "$_filename" && return 1

    pathfriendly_directory "$_filename" | tr '[:upper:]' '[:lower:]'
    return 0
}

function pathified_first_character
{
    local _string="$1"
    test -z "$_string" && return 1

    local _first_character="$(echo ${_string:0:1} | tr '[:lower:]' '[:upper:]')"

    if [ -z "$(echo "$_first_character" | egrep -i -o '^[A-Z]$' )" ]; then
        echo "SYM"
    else
        echo "$_first_character"
    fi

    return 0
}

function link_unexist
{
    local _link_source="$1"
    ! test -e "$_link_source" && return 1

    local _link_target="$2"
    test -L "$_link_target" && return 0
    test -e "$_link_target" && return 2

    ! ln -s "$_link_source" "$_link_target" && return 3

    return 0
}
